#include <WiFi.h>
#include <WebServer.h>
#include <DHT.h>

#define DHTPIN 2     // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11   // DHT 11
DHT dht(DHTPIN, DHTTYPE);

#define MQ9PIN 34   // Analog pin connected to the MQ-9 sensor
#define PULSEPIN 32 // Analog pin connected to the pulse sensor

WebServer server(80);

const char* ssid = "SmartMJ";
const char* password = "12345678";
  
unsigned long previousMillis = 0;
unsigned int BPM = 0;
int pulseWave = 0;
int pulseThresh = 500;
int pulseBeat = 0;
const long interval = 60000; // Check WiFi connection every 60 seconds

void handleRoot() {
  String html = "<html><head><meta http-equiv='refresh' content='2'><link rel='preconnect' href='https://fonts.googleapis.com'><link rel='preconnect' href='https://fonts.gstatic.com' crossorigin><link href='https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap' rel='stylesheet'><style>body {padding: 0;box-sizing: border-box;margin: 0;font-family: 'Poppins', sans-serif;display: flex;flex-direction: column;justify-content: space-between;align-items: center;height: 100vh;}.title {text-align: center;}.main {text-align: center;}.footer {display: flex;width: 100%;justify-content: space-evenly;background-color: #212529;color: #f2f2f2;}</style></head><body><h1 class='title'>Smart Miners Jacket (Group 14)</h1><div class='main'><h2 class='main-title'>Miner Data</h2><div class='main-container'>"; 
  html += "<p class='main-item'>Temperature: " + String(dht.readTemperature()) + " &deg;C</p>";
  html += "<p class='main-item'>Humidity: " + String(dht.readHumidity()) + " %</p>";
  html += "<p class='main-item'>MQ-9: " + String(analogRead(MQ9PIN)) + "</p>";
  html += "<p class='main-item'>Heart Rate: " + String(getBeatsPerMinute()) + " bpm</p>";
  html += "</div></div><div class='footer'><p class='footer-item'>Shreeyash Bhavsar</p><p class='footer-item'>Sahil Dahekar</p><p class='footer-item'>Gandhar Hardikar</p></div></body></html>";
  
  server.send(200, "text/html", html);

  Serial.print("Temperature: ");
  Serial.print(dht.readTemperature());
  Serial.print(" Â°C, Humidity: ");
  Serial.print(dht.readHumidity());
  Serial.print(" %, MQ-9: ");
  Serial.print(analogRead(MQ9PIN));
  Serial.print(", Heart Rate: ");
  Serial.print(getBeatsPerMinute());
  Serial.println(" bpm");
}

void setup() {
  Serial.begin(115200);
  dht.begin();
  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
  
  server.on("/", handleRoot);
  server.begin();
  Serial.println("HTTP server started");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  server.handleClient();
  
  // Check WiFi connection every interval milliseconds
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("WiFi connection lost, reconnecting...");
      WiFi.disconnect();
      WiFi.begin(ssid, password);
      while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
      }
      Serial.println("Connected to WiFi");
    }
  }
}

int getBeatsPerMinute() {
  
  int pulseSensor = analogRead(PULSEPIN);

  if (pulseSensor > pulseThresh) {
    pulseBeat = 1;
  }

  if ((pulseSensor < pulseThresh) && (pulseBeat == 1)) {
    BPM = 60000 / (millis() - previousMillis);
    Serial.println(BPM);
    pulseBeat = 0;
    previousMillis = millis();
  }
  
  return BPM;
}
